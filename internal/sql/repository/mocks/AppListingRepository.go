// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	bean "github.com/devtron-labs/devtron/api/bean"
	helper "github.com/devtron-labs/devtron/internal/sql/repository/helper"
	mock "github.com/stretchr/testify/mock"

	pg "github.com/go-pg/pg"

	repository "github.com/devtron-labs/devtron/internal/sql/repository"
)

// AppListingRepository is an autogenerated mock type for the AppListingRepository type
type AppListingRepository struct {
	mock.Mock
}

// DeploymentDetailByArtifactId provides a mock function with given fields: ciArtifactId
func (_m *AppListingRepository) DeploymentDetailByArtifactId(ciArtifactId int) (bean.DeploymentDetailContainer, error) {
	ret := _m.Called(ciArtifactId)

	var r0 bean.DeploymentDetailContainer
	if rf, ok := ret.Get(0).(func(int) bean.DeploymentDetailContainer); ok {
		r0 = rf(ciArtifactId)
	} else {
		r0 = ret.Get(0).(bean.DeploymentDetailContainer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ciArtifactId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeploymentDetailsByAppIdAndEnvId provides a mock function with given fields: appId, envId
func (_m *AppListingRepository) DeploymentDetailsByAppIdAndEnvId(appId int, envId int) (bean.DeploymentDetailContainer, error) {
	ret := _m.Called(appId, envId)

	var r0 bean.DeploymentDetailContainer
	if rf, ok := ret.Get(0).(func(int, int) bean.DeploymentDetailContainer); ok {
		r0 = rf(appId, envId)
	} else {
		r0 = ret.Get(0).(bean.DeploymentDetailContainer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAppDetail provides a mock function with given fields: appId, envId
func (_m *AppListingRepository) FetchAppDetail(appId int, envId int) (bean.AppDetailContainer, error) {
	ret := _m.Called(appId, envId)

	var r0 bean.AppDetailContainer
	if rf, ok := ret.Get(0).(func(int, int) bean.AppDetailContainer); ok {
		r0 = rf(appId, envId)
	} else {
		r0 = ret.Get(0).(bean.AppDetailContainer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAppStageStatus provides a mock function with given fields: appId
func (_m *AppListingRepository) FetchAppStageStatus(appId int) ([]bean.AppStageStatus, error) {
	ret := _m.Called(appId)

	var r0 []bean.AppStageStatus
	if rf, ok := ret.Get(0).(func(int) []bean.AppStageStatus); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.AppStageStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAppTriggerView provides a mock function with given fields: appId
func (_m *AppListingRepository) FetchAppTriggerView(appId int) ([]bean.TriggerView, error) {
	ret := _m.Called(appId)

	var r0 []bean.TriggerView
	if rf, ok := ret.Get(0).(func(int) []bean.TriggerView); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bean.TriggerView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAppsByEnvironment provides a mock function with given fields: appListingFilter
func (_m *AppListingRepository) FetchAppsByEnvironment(appListingFilter helper.AppListingFilter) ([]*bean.AppEnvironmentContainer, error) {
	ret := _m.Called(appListingFilter)

	var r0 []*bean.AppEnvironmentContainer
	if rf, ok := ret.Get(0).(func(helper.AppListingFilter) []*bean.AppEnvironmentContainer); ok {
		r0 = rf(appListingFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bean.AppEnvironmentContainer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(helper.AppListingFilter) error); ok {
		r1 = rf(appListingFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOtherEnvironment provides a mock function with given fields: appId
func (_m *AppListingRepository) FetchOtherEnvironment(appId int) ([]*bean.Environment, error) {
	ret := _m.Called(appId)

	var r0 []*bean.Environment
	if rf, ok := ret.Get(0).(func(int) []*bean.Environment); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bean.Environment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAppCount provides a mock function with given fields: isProd
func (_m *AppListingRepository) FindAppCount(isProd bool) (int, error) {
	ret := _m.Called(isProd)

	var r0 int
	if rf, ok := ret.Get(0).(func(bool) int); ok {
		r0 = rf(isProd)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(isProd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastDeployedStatusByAppName provides a mock function with given fields: appName
func (_m *AppListingRepository) FindLastDeployedStatusByAppName(appName string) (repository.DeploymentStatus, error) {
	ret := _m.Called(appName)

	var r0 repository.DeploymentStatus
	if rf, ok := ret.Get(0).(func(string) repository.DeploymentStatus); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(repository.DeploymentStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastDeployedStatusForAcdPipelineByAppIdAndEnvId provides a mock function with given fields: appId, envId
func (_m *AppListingRepository) FindLastDeployedStatusForAcdPipelineByAppIdAndEnvId(appId int, envId int) (repository.DeploymentStatus, error) {
	ret := _m.Called(appId, envId)

	var r0 repository.DeploymentStatus
	if rf, ok := ret.Get(0).(func(int, int) repository.DeploymentStatus); ok {
		r0 = rf(appId, envId)
	} else {
		r0 = ret.Get(0).(repository.DeploymentStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(appId, envId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastDeployedStatusesByAppNames provides a mock function with given fields: appNames
func (_m *AppListingRepository) FindLastDeployedStatusesByAppNames(appNames []string) ([]repository.DeploymentStatus, error) {
	ret := _m.Called(appNames)

	var r0 []repository.DeploymentStatus
	if rf, ok := ret.Get(0).(func([]string) []repository.DeploymentStatus); ok {
		r0 = rf(appNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.DeploymentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(appNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLastDeployedStatusesForAllApps provides a mock function with given fields:
func (_m *AppListingRepository) FindLastDeployedStatusesForAllApps() ([]repository.DeploymentStatus, error) {
	ret := _m.Called()

	var r0 []repository.DeploymentStatus
	if rf, ok := ret.Get(0).(func() []repository.DeploymentStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.DeploymentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestDeployedStatusesForAppsByStatusAndLastUpdatedBefore provides a mock function with given fields: deployedBeforeMinutes
func (_m *AppListingRepository) FindLatestDeployedStatusesForAppsByStatusAndLastUpdatedBefore(deployedBeforeMinutes int) ([]repository.DeploymentStatus, error) {
	ret := _m.Called(deployedBeforeMinutes)

	var r0 []repository.DeploymentStatus
	if rf, ok := ret.Get(0).(func(int) []repository.DeploymentStatus); ok {
		r0 = rf(deployedBeforeMinutes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.DeploymentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(deployedBeforeMinutes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrometheusApiByEnvId provides a mock function with given fields: id
func (_m *AppListingRepository) PrometheusApiByEnvId(id int) (*string, error) {
	ret := _m.Called(id)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveNewDeployment provides a mock function with given fields: deploymentStatus, tx
func (_m *AppListingRepository) SaveNewDeployment(deploymentStatus *repository.DeploymentStatus, tx *pg.Tx) error {
	ret := _m.Called(deploymentStatus, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.DeploymentStatus, *pg.Tx) error); ok {
		r0 = rf(deploymentStatus, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveNewDeploymentsWithTxn provides a mock function with given fields: deploymentStatuses, tx
func (_m *AppListingRepository) SaveNewDeploymentsWithTxn(deploymentStatuses []repository.DeploymentStatus, tx *pg.Tx) error {
	ret := _m.Called(deploymentStatuses, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func([]repository.DeploymentStatus, *pg.Tx) error); ok {
		r0 = rf(deploymentStatuses, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAppListingRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppListingRepository creates a new instance of AppListingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppListingRepository(t mockConstructorTestingTNewAppListingRepository) *AppListingRepository {
	mock := &AppListingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
